import RegexBuilder

let searchString = "john"
let searchExpression = /john/

//================================================================
let stringToSearch = "Johnny Appleseed wants to change his name to John."

stringToSearch.contains(searchString) // false
stringToSearch.contains(searchExpression) // false

//================================================================
let flexibleExpression = /[Jj]ohn/
stringToSearch.contains(flexibleExpression) // true

// Mini-Exercise ============================================================
let pattern = /[A-Za-z]+[0-9]+/
let text1 = "abcd12345"
let text2 = "swiftapprentice2023"
let text3 = "XYZ567"
let text4 = "Pennsylvania65000"
text1.contains(pattern)
text2.contains(pattern)
text3.contains(pattern)
text4.contains(pattern)
//================================================================
//let lowercaseLetters = /[a-z*/

//================================================================
let lowercaseLetters = /[a-z]*/

//================================================================
let lettersAndNumbers = /[a-z]+[0-9]+/

//================================================================
let testingString1 = "abcdef ABCDEF 12345 abc123 ABC 123 123ABC 123abc abcABC"
for match in testingString1.matches(of: lettersAndNumbers) {
 print(String(match.output))
}

//================================================================
let possibleLettersAndPossibleNumbers = /[a-z]*[0-9]*/

//================================================================
//for match in testingString1.matches(of: possibleLettersAndPossibleNumbers) {
//  print(String(match.output)) // 32 times
//}

//================================================================
let emptyString = ""
for match in emptyString.matches(of: possibleLettersAndPossibleNumbers) {
  print(String(match.output)) // 1 times
}
let matchCount = emptyString.matches(of:
    possibleLettersAndPossibleNumbers).count // 1

//================================================================
let fixedPossibleLettersAndPossibleNumbers = /[a-z]+[0-9]*|[a-z]*[0-9]+/

//================================================================
for match in testingString1.matches(of: fixedPossibleLettersAndPossibleNumbers) {
  print(String(match.output))
}
//abcdef
//12345
//abc123
//123
//123
//123
//abc
//abc

//================================================================
let fixedWithBoundaries = /\b[a-z]+[0-9]*\b|\b[a-z]*[0-9]+\b/

//================================================================
for match in testingString1.matches(of: fixedWithBoundaries) {
  print(String(match.output))
}
//abcdef
//12345
//abc123
//123

// Challenge 1 ================================================================
let textArray = ["123ABC", "ABC123", "ABC", "abcABC", "ABCabc", "abcABC123", "a1b2ABCDEc3d4", "abcA12a3", "abc123"]
//let onlyTwoPlusCaps = /[0-9a-z]?[A-Z]{2,}[0-9a-z]?/
func matchingTrueOrFalse(texts: [String]) -> [Bool] {
  var anArray : [Bool] = []
  for c in 0...texts.count - 1 {
    anArray.append(texts[c].contains(Regex {
      Optionally {
        CharacterClass(
          ("0"..."9"),
          ("a"..."z")
        )
      }
      Repeat(2...) {
        ("A"..."Z")
      }
      Optionally {
        CharacterClass(
          ("0"..."9"),
          ("a"..."z")
        )
      }
    }))
  }
  return anArray
}
print(matchingTrueOrFalse(texts: textArray))

//================================================================
let newlettersAndNumbers = Regex {
  OneOrMore { "a"..."z" }
  OneOrMore { .digit }
}

//================================================================
let newFixedRegex = Regex {
  Anchor.wordBoundary
  ChoiceOf {
   Regex {
     OneOrMore {
       "a"..."z"
     }
     ZeroOrMore {
       .digit
     }
   }
   Regex {
     ZeroOrMore {
       "a"..."z"
     }
     OneOrMore {
       .digit
     }
   }
  }
  Anchor.wordBoundary
}

//================================================================
let regexWithCapture = Regex {
  OneOrMore {
    "a"..."z"
  }
  Capture {
    OneOrMore {
      CharacterClass.digit
    }
  }
  OneOrMore {
    "a"..."z"
  }
}

//================================================================
let testingString2 = "welc0me to chap7er 10 in sw1ft appren71ce. " +
  "Th1s chap7er c0vers regu1ar express1ons and regexbu1lder"

for match in testingString2.matches(of: regexWithCapture) {
  print(match.output)
}
//("elc0me", "0")
//("chap7er", "7")
//("sw1ft", "1")
//("appren71ce", "71")
//("h1s", "1")
//("chap7er", "7")
//("c0vers", "0")
//("regu1ar", "1")
//("express1ons", "1")
//("regexbu1lder", "1")

//================================================================
for match in testingString2.matches(of: regexWithCapture) {
  let (wordMatch, extractedDigit) = match.output
  print("Full Match: \(wordMatch) | Captured value: \(extractedDigit)")
}

//================================================================
//Full Match: elc0me | Captured value: 0
//Full Match: chap7er | Captured value: 7
//Full Match: sw1ft | Captured value: 1
//Full Match: appren71ce | Captured value: 71
//Full Match: h1s | Captured value: 1
//Full Match: chap7er | Captured value: 7
//Full Match: c0vers | Captured value: 0
//Full Match: regu1ar | Captured value: 1
//Full Match: express1ons | Captured value: 1
//Full Match: regexbu1lder | Captured value: 1


//================================================================
let regexWithStrongType = Regex {
  OneOrMore {
    "a"..."z"
  }
  TryCapture {
    OneOrMore {
      CharacterClass.digit
    }
  } transform: {foundDigits in
     Int(foundDigits)
  }
  OneOrMore {
    "a"..."z"
  }
}
print(regexWithStrongType)
//("elc0me", 0)
//("chap7er", 7)
//("sw1ft", 1)
//("appren71ce", 71)
//("h1s", 1)
//("chap7er", 7)
//("c0vers", 0)
//("regu1ar", 1)
//("express1ons", 1)
//("regexbu1lder", 1)

//================================================================
let repetition = "123abc456def789ghi"

//================================================================
let repeatedCaptures = Regex {
  OneOrMore {
    Capture {
      OneOrMore {
        CharacterClass.digit
      }
    }
    OneOrMore {
      "a"..."z"
    }
  }
}

//================================================================
for match in repetition.matches(of: repeatedCaptures) {
  print(match.output)
}

// Challenge 2 ================================================================
let textArrayB = ["123ABC", "ABC123", "ABC", "abcABC", "ABCabc", "abcABC123", "a1b2ABCDEc3d4", "abcA12a3", "abc123"]
//let onlyTwoPlusCaps = /[0-9a-z]?([A-Z]{3,})[0-9a-z]?/
func matchingTrueOrFalseB(texts: [String]) {
//  var anArray : [(String, String)] = []
  for c in 0...texts.count - 1 {
    for capture in texts[c].matches(of: /[0-9a-z]?([A-Z]{3,})[0-9a-z]?/) {
      print(capture.output)
    }
  }
//  return anArray
}
print(matchingTrueOrFalseB(texts: textArrayB))


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


