import Foundation

//================================================================
var numbers = [1, 2, 3]
numbers.removeLast()
numbers // [1, 2]

//================================================================
let months = ["January", "February", "March",
              "April", "May", "June",
              "July", "August", "September",
              "October", "November", "December"]

// function outside struct ================================================
struct SimpleDateOUT {
  var month: String
}

func monthsUntilSummerBreakOUT(from date: SimpleDateOUT) -> Int {
  months.firstIndex(of: "December")! - months.firstIndex(of: date.month)!
}
let dateOUT = SimpleDateOUT(month: "October")
monthsUntilSummerBreakOUT(from: dateOUT)

// function in struct ===========================================
struct SimpleDateIN {
  var month: String

  func monthsUntilSummerBreakIN(from date: SimpleDateIN) -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: date.month)!
  }
}
let dateIN = SimpleDateIN(month: "October")
dateIN.monthsUntilSummerBreakIN(from: dateIN) // 2
//dateB.monthsUntilSummerBreakIN() // Error!

// function using self ===========================================
struct SimpleDateSELF {
  var month: String
  
  func monthsUntilSummerBreakSELF() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: self.month)!
  }
}
let dateSELF = SimpleDateSELF(month: "October")
dateSELF.monthsUntilSummerBreakSELF() // 2

// function dropping self ===========================================
struct SimpleDateMONTH {
  var month: String
  
  func monthsUntilSummerBreakMONTH() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}
let dateMONTH = SimpleDateMONTH(month: "October")
dateMONTH.monthsUntilSummerBreakMONTH() // 2

// Mini-Exercise 1 =====================================================
//Since monthsUntilWinterBreak() returns a single value and there’s not much calculation involved, transform the method into a computed property with a getter component.
struct SimpleDateCOMPROP {
  var month: String
  
  var monthsUntilSummerBreakCOMPROP : Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}
let dateCOMPROP = SimpleDateCOMPROP(month: "October")
dateCOMPROP.monthsUntilSummerBreakCOMPROP // 2


// Mini-Exercise ================================================================
struct SimpleDateMini1 {
  var month: String

  var monthsUntilSummerBreak : Int {
    return months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}
//let dateBc = SimpleDateBc(month: "March")
//dateBc.month // January
//dateBc.monthsUntilSummerBreak // 11



// Initializers =======================================================

//let dateBb = SimpleDateB(month: "October")

//================================================================
//let dateBb = SimpleDateB() // Error!

//================================================================
struct SimpleDateEMPTY {
  var month: String

  init() {
    month = "January"
  }

  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: self.month)!
  }
}

let dateEMPTY = SimpleDateEMPTY()
dateEMPTY.month // January
dateEMPTY.monthsUntilSummerBreak() // 11

//================================================================
struct SimpleDateEMPTYII {
  var month: String

  init() {
    month = "March"
  }

  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: self.month)!
  }
}


//================================================================
let dateEMPTYII = SimpleDateEMPTYII()
dateEMPTYII.month // March
dateEMPTYII.monthsUntilSummerBreak() // 9


// Initializers in Structures ================================================
struct SimpleDateEXHAUSTIVE {
  var month: String
  var day: Int

  init() {
    month = "January"
    day = 1
  }

  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}
//let valentinesDayEXHAUSTIVE = SimpleDateEXHAUSTIVE(month: "February", day: 14) // Error! Argument passed to call that takes no arguments

struct SimpleDateCUSTOMMEMBERWISE {
  var month: String
  var day: Int

  init() {
    month = "January"
    day = 1
  }
  init(month: String, day: Int) {
    self.month = month
    self.day = day
  }
  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}


let valentinesDayCUSTOMMEMBERWISE = SimpleDateCUSTOMMEMBERWISE(month: "February", day: 14)
valentinesDayCUSTOMMEMBERWISE.month // February
valentinesDayCUSTOMMEMBERWISE.day // 14
valentinesDayCUSTOMMEMBERWISE.monthsUntilSummerBreak()


// Default Values and Initializers ============================================
struct SimpleDateDEFAULTVALUES {
  // 1
  var month = "January"
  var day = 1

  //2

  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}

//================================================================
let newYearsDayDEFAULTVALUES = SimpleDateDEFAULTVALUES()
newYearsDayDEFAULTVALUES.month // January
newYearsDayDEFAULTVALUES.day // 1

let valentinesDayDEFAULTVALUES = SimpleDateDEFAULTVALUES(month: "February", day: 14)
valentinesDayDEFAULTVALUES.month // February
valentinesDayDEFAULTVALUES.day // 14

//================================================================
let octoberFirstDEFAULTVALUES = SimpleDateDEFAULTVALUES(month: "October")
octoberFirstDEFAULTVALUES.month // October
octoberFirstDEFAULTVALUES.day // 1

let januaryTwentySecondDEFAULTVALUES = SimpleDateDEFAULTVALUES(day: 22)
januaryTwentySecondDEFAULTVALUES.month // January
januaryTwentySecondDEFAULTVALUES.day // 22
// Mutating Methods ===============================================
struct SimpleDateMUTATING {
  // 1
  var month = "January"
  var day = 1

  mutating func advance() {
    day += 1
  }
  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
}
var januaryTwentySecondMUTATING = SimpleDateMUTATING(day: 22)
januaryTwentySecondMUTATING.month // January
januaryTwentySecondMUTATING.day // 22
januaryTwentySecondMUTATING.advance()
januaryTwentySecondMUTATING.day
// Type Methods =================================================
struct Math {
  // 1
  static func factorial(of number: Int) -> Int {
    // 2
    (1...number).reduce(1, *)
  }
}
// 3
Math.factorial(of: 6) // 720
// Mini-Exercise 2 =====================================================
//Add a type method to the Math structure that calculates the n-th triangle number. It will be very similar to the factorial formula, except instead of multiplying the numbers, you add them.
struct MathMini2 {
  static func triangle(of number: Int) -> Int {
    (1...number).reduce(1, +)
  }
}
// 3
MathMini2.triangle(of: 6)

// Adding to an Existing Structure With Extensions ===========================
extension Math {
  static func primeFactors(of value: Int) -> [Int] {
    // 1
    var remainingValue = value
    // 2
    var testFactor = 2
    var primes: [Int] = []
    // 3
    while testFactor * testFactor <= remainingValue {
      if remainingValue % testFactor == 0 {
        primes.append(testFactor)
        remainingValue /= testFactor
      }
      else {
        testFactor += 1
      }
    }
    if remainingValue > 1 {
      primes.append(remainingValue)
    }
    return primes
  }
}
Math.primeFactors(of: 81) // [3, 3, 3, 3]

// Compiler-generated Initializer Using Extensions ============================
struct SimpleDateEXTENSION {
  var month = "January"
  var day = 1

  func monthsUntilSummerBreak() -> Int {
    months.firstIndex(of: "December")! - months.firstIndex(of: month)!
  }
  mutating func advance() {
    day += 1
  }
}

extension SimpleDateEXTENSION {
  init(month: Int, day: Int) {
    self.month = months[month-1]
    self.day = day
  }
}
let dateJanuaryEXTENSION = SimpleDateEXTENSION() // compiler generated
dateJanuaryEXTENSION.month
dateJanuaryEXTENSION.day
let halloweenEXTENSION = SimpleDateEXTENSION(month: 10, day: 31)
halloweenEXTENSION.month // October
halloweenEXTENSION.day // 31



// Challenge 1: Grow a Circle ========================================
//Given the Circle structure below:
//struct Circle {
//  var radius = 0.0
//  var area: Double {
//    .pi * radius * radius
//  }
//}
//Write a method that can change an instance’s area by a growth factor. For example, if you call circle.grow(byFactor: 3), the area of the instance will triple.
//Hint: Add a setter to area.
struct Circle {
  var radius = 0.0
  var area: Double {
    get {
      .pi * radius * radius
    }
    set {
      radius = (newValue / .pi).squareRoot()
    }
  }
  mutating func grow(byFactor: Int) -> Double {
    area = area * Double(byFactor)
    return area
  }
}
var circle = Circle(radius: 50)
circle.area
circle.grow(byFactor: 3)
circle.area
// Challenge 2: A More Advanced advance() ================================================================
let monthsF = ["January", "February", "March",
             "April", "May", "June",
             "July", "August", "September",
             "October", "November", "December"]

struct SimpleDateG {
  var month: String
  var day: Int
  
  mutating func advance() {
    if (day == 30 &&  (month == "April" || month == "June" || month == "September" || month == "November")) || (day == 31 &&  (month == "January" || month == "March" || month == "May" || month == "July" || month == "August" || month == "September" || month == "October")) || day == 28 && month == "February" {
      day = 1
      month = monthsF[monthsF.firstIndex(of: self.month)! + 1]
    } else if day == 31 &&  month == "December" {
      day = 1
      month = "January"
    } else {
      day += 1
    }
  }
}

var dateG = SimpleDateG(month: "February", day: 28)
dateG.advance()
dateG.month // December; should be January!
dateG.day // 32; should be 1!

// Challenge 3: Odd and Even Math ================================================================
extension Math {
  static func isOdd(of value: Int) -> Bool {
    !(value % 2 == 0)
  }
  static func isEven(of value: Int) -> Bool {
    value % 2 == 0
  }
}

Math.isOdd(of: 8)
Math.isEven(of: 13)

// Challenge 4: Odd and Even Int ================================================================
extension Int {
  var isOdd: Bool {
    !(self % 2 == 0)
  }
  var isEven: Bool {
    self % 2 == 0
  }
}

8.isOdd
13.isEven


// Challenge 5: Prime Factors ================================================================
//extension Int {
//  func primeFactors() -> [Int] {
//    var valuesArray : [Int] = []
//    for c in 2...self - 1 {
//      if Double(self).remainder(dividingBy: Double(c)) == 0 {
//        for b in 2...c - 1 {
//          if Double(c).remainder(dividingBy: Double(b)) == 0 {
//            break
//          } else {
//            valuesArray.append(c)
//          }
//        }
//      }
//    }
//    return valuesArray
//  }
//}
//
//30.primeFactors()

extension Int {
  func primeFactors() -> [Int] {
    var remainingValue = self
    var testFactor = 2
    var primes: [Int] = []
    while testFactor * testFactor <= remainingValue {
      if remainingValue % testFactor == 0 {
        primes.append(testFactor)
        remainingValue /= testFactor
      }
      else {
        testFactor += 1
      }
    }
    if remainingValue > 1 {
      primes.append(remainingValue)
    }
    return primes
  }
}

81.primeFactors() // [3, 3, 3, 3]
18.primeFactors() // [2, 3, 3]
57.primeFactors() // [3, 19]








//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


//================================================================


