import Foundation

var integer: Int = 100
var decimal: Double = 12.5
//integer = decimal

//================================================================
integer = Int(decimal)

//================================================================
let hourlyRate: Double = 19.5
let hoursWorked: Int = 10
//let totalCost: Double = hourlyRate * hoursWorked

//================================================================
let totalCost: Double = hourlyRate * Double(hoursWorked)

//================================================================
let typeInferredInt = 42

//================================================================
let typeInferredDouble = 3.14159

//================================================================
let wantADouble = 3

//================================================================
let actuallyDouble = Double(3)

//================================================================
let actuallyDoubleB: Double = 3

//================================================================
let actuallyDoubleC = 3 as Double

//  Mini-Exercises 1 ================================================================
let age1 = 42
let age2 = 21
//  Mini-Exercises 2 ================================================================
let avg1 = (age1 + age2) / 2
//  Mini-Exercises 3 ================================================================
let avg1B = (Double(age1) + Double(age2)) / 2

//================================================================
let characterA: Character = "a"

//================================================================
let characterDog: Character = "üê∂"

//================================================================
let stringDog: String = "Dog"

//================================================================
let stringDogB = "Dog" // Inferred to be of type String

//================================================================
var message = "Hello" + " my name is "
let name = "Matt"
message += name // "Hello my name is Matt"

//================================================================
let exclamationMark: Character = "!"
message += String(exclamationMark) // "Hello my name is Matt!"

//================================================================
message = "Hello my name is \(name)!" // "Hello my name is Matt!"

//================================================================
let oneThird = 1.0 / 3.0
let oneThirdLongString = "One third is \(oneThird) as a decimal."

////================================================================
let bigString = """
  You can have a string
  that contains multiple
  lines
  by
  doing this.
  """
print(bigString)

////================================================================
////You can have a string
////that contains multiple
////lines
////by
////doing this.
//
//  Mini-Exercises 1 ================================================================
let firstName = "Bill"
let lastName = "Ted"
//  Mini-Exercises 2 ================================================================
let fullName = firstName + " " + lastName
//  Mini-Exercises 3 ================================================================
let myDetails = "Hello, my name is \(fullName)."

//================================================================
let coordinates: (Int, Int) = (2, 3)

//================================================================
let coordinatesB = (2, 3)

//================================================================
let coordinatesDoubles = (2.1, 3.5)
// Inferred to be of type (Double, Double)

//================================================================
let coordinatesMixed = (2.1, 3)
// Inferred to be of type (Double, Int)

//================================================================
let x1 = coordinates.0
let y1 = coordinates.1

//================================================================
let coordinatesNamed = (x: 2, y: 3)
// Inferred to be of type (x: Int, y: Int)

//================================================================
let x2 = coordinatesNamed.x
let y2 = coordinatesNamed.y

//================================================================
let coordinates3D = (x: 2, y: 3, z: 1)
let (x3, y3, z3) = coordinates3D

//================================================================
let coordinates3Db = (x: 2, y: 3, z: 1)
let x3b = coordinates3D.x
let y3b = coordinates3D.y
let z3b = coordinates3D.z

//================================================================
let (x4, y4, _) = coordinates3D

//  Mini-Exercises 1 ================================================================
let date = (1, 11, 2025, 80)

//  Mini-Exercises 2 ================================================================
let dateB = (month: 1, day: 11, year: 2025, aveTemp: 80)

//  Mini-Exercises 3 ================================================================
let (_, d, _, t) = dateB
d
t
//  Mini-Exercises 4 ================================================================
var dateC = (month: 1, day: 11, year: 2025, aveTemp: 80)
dateC.aveTemp = 79
dateC.aveTemp
//================================================================
let a: Int16 = 12
let b: UInt8 = 255
let c: Int32 = -100000

let answer = Int(a) + Int(b) + Int(c)  // answer is an Int

//================================================================
typealias Animal = String

//================================================================
let myPet: Animal = "Dog"

//================================================================
typealias Coordinates = (Int, Int)
let xy: Coordinates = (2, 4)


////================================================================
//let character: Character = "Dog"
//let character: Character = "üê∂"
//let string: String = "Dog"
//let string: String = "üê∂"
//
//================================================================
//let tuple = (day: 15, month: 8, year: 2015)
//let day = tuple.Day
//
////================================================================
//let name = "Matt"
//name += " Galloway"
//
////================================================================
//let tuple = (100, 1.5, 10)
//let value = tuple.1

////================================================================
//let tuple = (day: 15, month: 8, year: 2015)
//let month = tuple.month
//
////================================================================
//let number = 10
//let multiplier = 5
//let summary = "\(number) multiplied by \(multiplier) equals \(number * multiplier)"
//
////================================================================
//let a = 4
//let b: Int32 = 100
//let c: UInt8 = 12
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
