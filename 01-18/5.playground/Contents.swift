func printMyName() -> String {
  "My name is Matt Galloway."
}

//================================================================
printMyName()

//================================================================
func printMultipleOfFive(value: Int) -> String {
  "\(value) * 5 = \(value * 5)"
}

printMultipleOfFive(value: 10)

//================================================================
func printMultipleOf(multiplier: Int, andValue: Int) -> String {
  "\(multiplier) * \(andValue) = \(multiplier * andValue)"
}

printMultipleOf(multiplier: 4, andValue: 2)

//================================================================
func printMultipleOf(multiplier: Int, and value: Int) -> String {
  "\(multiplier) * \(value) = \(multiplier * value)"
}

printMultipleOf(multiplier: 4, and: 2)

//================================================================
//func printMultipleOf(multiplier: Int, and: Int)

//================================================================
func printMultipleOf(_ multiplier: Int, and value: Int) -> String {
  "\(multiplier) * \(value) = \(multiplier * value)"
}

printMultipleOf(4, and: 2)

//================================================================
//func printMultipleOf(_ multiplier: Int, _ value: Int) -> String {
//  "\(multiplier) * \(value) = \(multiplier * value)"
//}
//
//printMultipleOf(4, 2)

//================================================================
func printMultipleOf(_ multiplier: Int, _ value: Int = 1) -> String {
  "\(multiplier) * \(value) = \(multiplier * value)"
}

printMultipleOf(4)

//================================================================
//func multiply(_ number: Int, by multiplier: Int) -> Int {
//  return number * multiplier
//}

let result = multiply(4, by: 2)

//================================================================
//func multiplyAndDivide(_ number: Int, by factor: Int)
//                   -> (product: Int, quotient: Int) {
//  return (number * factor, number / factor)
//}

let results = multiplyAndDivide(4, by: 2)
results
let product = results.product             // 8
let quotient = results.quotient           // 2

//================================================================
func multiply(_ number: Int, by multiplier: Int) -> Int {
  number * multiplier
}

func multiplyAndDivide(_ number: Int, by factor: Int)
                   -> (product: Int, quotient: Int) {
  (number * factor, number / factor)
}

//================================================================
//func incrementAndPrint(_ value: Int) {
//  value += 1
//  print(value)
//}

//================================================================
func incrementAndPrint(_ value: inout Int) {
  value += 1
  print(value)
}

//================================================================
var value = 5
incrementAndPrint(&value)
value

//================================================================
//func printMultipleOf(multiplier: Int, andValue: Int)
//func printMultipleOf(multiplier: Int, and value: Int)
//func printMultipleOf(_ multiplier: Int, and value: Int)
//func printMultipleOf(_ multiplier: Int, _ value: Int)

//================================================================
func getValue() -> Int {
  31
}

func getValue() -> String {
  "Matt Galloway"
}

//================================================================
//let value = getValue()

//================================================================
let valueInt: Int = getValue()
let valueString: String = getValue()

// Mini-Exercises 1 ================================================================
func printFullName(_ firstName: String, _ lastName: String) -> String {
  firstName + " " + lastName
}

printFullName("Bill", "Cash")

func calculateFullName(_ firstName: String, _ lastName: String) -> String {
  firstName + " " + lastName
}

let ullName = calculateFullName("Bill", "Cash")

ullName
func calculateFullNameB(_ firstName: String, _ lastName: String) -> (String, Int) {
  return (firstName + " " + lastName, firstName.count + lastName.count)
}
let ullNameB = calculateFullNameB( "Bill", "Cash")
ullNameB

//================================================================
func add(_ a: Int, _ b: Int) -> Int {
  a + b
}

//================================================================
var function = add

//================================================================
function(4, 2)

//================================================================
func subtract(_ a: Int, _ b: Int) -> Int {
  a - b
}

//================================================================
function = subtract
function(4, 2)

//================================================================
/// <#Description#>
/// - Parameters:
///   - function: <#function description#>
///   - a: <#a description#>
///   - b: <#b description#>
/// - Returns: <#description#>
func printResult(_ function: (Int, Int) -> Int, _ a: Int, _ b: Int) -> Int {
  let result = function(a, b)
  return result
}
printResult(add, 4, 2)

// ================================================================
//func noReturn() -> Never {
//
//}
//
////================================================================
//func infiniteLoop() -> Never {
//  while true {
//  }
//}
//
//
//
////================================================================
/// Calculates the average of three values
/// - Parameters:
///   - a: The first value.
///   - b: The second value.
///   - c: The third value.
/// - Returns: The average of the three values.
func calculateAverage(of a: Double, and b: Double, and c: Double) -> Double {
  let total = a + b + c
  let average = total / 3
  return average
}

calculateAverage(of: 1, and: 3, and: 5)
//
//
//
// Challenges 1 ================================================================
for index in stride(from: 10, to: 22, by: 4) {
  print(index)
}
// prints 10, 14, 18 //OVERLOADS to: causes less than

for index in stride(from: 10, through: 22, by: 4) {
  print(index)
}
// prints 10, 14, 18, and 22 //OVERLOADS through: causes inclusive

print("Challenges 1")
for index in stride(from: 10.0, through: 9.0, by: -0.1) {
  print(index)
}

// Challenges 2 ================================================================
func isNumberDivisible(_ number: Int, by divisor: Int) -> Bool {
  number % divisor == 0
}

//================================================================
func isPrime(_ number: Int) -> Bool {
  if number <= 0 {
    return false
  }
  for c in 2...(number - 1) {
    if isNumberDivisible(number, by: c) {
      return false
    }
  }
  return true
}

//================================================================
isPrime(6)     // false
isPrime(13)    // true
isPrime(8893)  // true

//================================================================
func fibonacci(_ number: Int) -> Int {
  if number < 1 {
    return 0
  }
  if number == 1 || number == 2 {
    return 1
  }
  
  
  print("A-Number=\(number)")
  print("B-Number-1=\(number-1)")
  print("C-Number-2=\(number-2)")
  print("D-fibonacci=")
  return fibonacci(number - 1) + fibonacci(number - 2)
}

//================================================================
print("fibonacci(1) : \(fibonacci(1))")
print("fibonacci(2) : \(fibonacci(2))")
print("fibonacci(3) : \(fibonacci(3))")
print("fibonacci(4) : \(fibonacci(4))")
print("fibonacci(5) : \(fibonacci(5))")
print("fibonacci(6) : \(fibonacci(6))")
print("fibonacci(7) : \(fibonacci(7))")
print("fibonacci(8) : \(fibonacci(8))")
print("fibonacci(9) : \(fibonacci(9))")
print("fibonacci(10) : \(fibonacci(10))")


////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
