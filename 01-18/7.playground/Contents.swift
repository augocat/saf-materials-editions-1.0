import Foundation
let evenNumbers = [2, 4, 6, 8]

//================================================================
var subscribers: [String] = []

//================================================================
let allZeros = Array(repeating: 0, count: 5) // [0, 0, 0, 0, 0]

//================================================================
let vowels = ["A", "E", "I", "O", "U"]

//================================================================
var players = ["Alice", "Bob", "Cindy", "Dan"]

//================================================================
print(players.isEmpty)
// > false

//================================================================
if players.count < 2 {
  print("We need at least two players!")
} else {
  print("Let’s start!")
}
// > Let’s start!

//================================================================
var currentPlayer = players.first

//================================================================
print(currentPlayer as Any)
// > Optional("Alice")

//================================================================
print(players.last as Any)
// > Optional("Dan")

//================================================================
currentPlayer = players.min()
print(currentPlayer as Any)
// > Optional("Alice")

//================================================================
print([2, 3, 1].first as Any)
// > Optional(2)
print([2, 3, 1].min() as Any)
// > Optional(1)

//================================================================
if let currentPlayer {
  print("\(currentPlayer) will start")
}
// > Alice will start

//================================================================
var firstPlayer = players[0]
print("First player is \(firstPlayer)")
// > First player is "Alice"

//================================================================
//var player = players[4]
// > fatal error: Index out of range

//================================================================
let upcomingPlayersSlice = players[1...2]
print(upcomingPlayersSlice[1], upcomingPlayersSlice[2])
// > "Bob Cindy\n"

//================================================================
let upcomingPlayersArray = Array(players[1...2])
print(upcomingPlayersArray[0], upcomingPlayersArray[1])
// > "Bob Cindy\n"

//================================================================
@MainActor func isEliminated(player: String) -> Bool {
  !players.contains(player)
}

//================================================================
print(isEliminated(player: "Bob"))
// > false

//================================================================
players[1...3].contains("Bob") // true

//================================================================
players.append("Eli")

//================================================================
players += ["Gina"]

//================================================================
print(players)
// > ["Alice", "Bob", "Cindy", "Dan", "Eli", "Gina"]

//================================================================
players.insert("Frank", at: 5)

//================================================================
var removedPlayer = players.removeLast()
print("\(removedPlayer) was removed")
// > Gina was removed

//================================================================
removedPlayer = players.remove(at: 2)
print("\(removedPlayer) was removed")
// > Cindy was removed

// Mini - Exercise ================================================================
let indexDan = players.firstIndex(of: "Dan")
print("Mini - Exercise \(indexDan!)")

//================================================================
print(players)
// > ["Alice", "Bob", "Dan", "Eli", "Frank"]
players[4] = "Franklin"
print(players)
// > ["Alice", "Bob", "Dan", "Eli", "Franklin"]

//================================================================
players[0...1] = ["Donna", "Craig", "Brian", "Anna"]
print(players)
// > ["Donna", "Craig", "Brian", "Anna", "Dan", "Eli", "Franklin"]

//================================================================
let playerAnna = players.remove(at: 3)
players.insert(playerAnna, at: 0)
print(players)
// > ["Anna", "Donna", "Craig", "Brian", "Dan", "Eli", "Franklin"]

//================================================================
players.swapAt(1, 3)
print(players)
// > ["Anna", "Brian", "Craig", "Donna", "Dan", "Eli", "Franklin"]

//================================================================
players.sort()
print(players)
// > ["Anna", "Brian", "Craig", "Dan", "Donna", "Eli", "Franklin"]

//================================================================
let scores = [2, 2, 8, 6, 1, 2, 1]

//================================================================
for player in players {
  print(player)
}
// > Anna
// > Brian
// > Craig
// > Dan
// > Donna
// > Eli
// > Franklin

//================================================================
for (index, player) in players.enumerated() {
  print("\(index + 1). \(player)")
}
// > 1. Anna
// > 2. Brian
// > 3. Craig
// > 4. Dan
// > 5. Donna
// > 6. Eli
// > 7. Franklin

//================================================================
func sumOfElements(in array: [Int]) -> Int {
  var sum = 0
  for number in array {
    sum += number
  }
  return sum
}

//================================================================
print(sumOfElements(in: scores))
// > 22

// Mini - Exercise ================================================================
print("Mini - Exercise")
for (index, player) in players.enumerated() {
  print("name: \(player) -> score: \(scores[index])")
}

//================================================================
var namesAndScores = ["Anna": 2, "Brian": 2, "Craig": 8, "Donna": 6]
print(namesAndScores)
// > ["Craig": 8, "Anna": 2, "Donna": 6, "Brian": 2]

//================================================================
namesAndScores = [:]

//================================================================
var pairs: [String: Int] = [:]

//================================================================
pairs.reserveCapacity(20)

//================================================================
namesAndScores = ["Anna": 2, "Brian": 2, "Craig": 8, "Donna": 6]
// Restore the values

print(namesAndScores["Anna"]!) // 2

//================================================================
namesAndScores["Greg"] // nil

//================================================================
namesAndScores.isEmpty  //  false
namesAndScores.count    //  4

//================================================================
var bobData = [
  "name": "Bob",
  "profession": "Card Player",
  "country": "USA"
]
print(bobData)
//================================================================
bobData.updateValue("CA", forKey: "state")
print(bobData)

//================================================================
bobData["city"] = "San Francisco"
print(bobData)

// Mini - Exercise ================================================================
print("Mini - Exercise")
var bob = ["name": "Bob",
           "profession": "Card Player",
           "country": "USA",
           "state": "CA",
           "city": "San Francisco"]

func printCityAndState(ofPlayer name: [String: String]) {
  if let city = name["city"], let state = name["state"] {
    print("bob lives in \(state) of city \(city)")
  }
}
printCityAndState(ofPlayer: bob)

//================================================================
bobData.updateValue("Bobby", forKey: "name") // Bob
print(bobData)

//================================================================
bobData["profession"] = "Mailman"
print(bobData)

//================================================================
bobData.removeValue(forKey: "state")
print(bobData)

//================================================================
bobData["city"] = nil
print(bobData)

//================================================================
for (player, score) in namesAndScores {
  print("\(player) - \(score)")
}
// > Craig - 8
// > Anna - 2
// > Donna - 6
// > Brian - 2

//================================================================
for player in namesAndScores.keys {
  print("\(player), ", terminator: "") // no newline
}
print("") // print one final newline
// > Craig, Anna, Donna, Brian,

//================================================================
let setOne: Set<Int> = [1]

//================================================================
let someArray = [1, 2, 3, 1]

//================================================================
var explicitSet: Set<Int> = [1, 2, 3, 1]

//================================================================
var someSet = Set([1, 2, 3, 1])

//================================================================
print(someSet)
// > [2, 3, 1] but the order is not defined

//================================================================
print(someSet.contains(1))
// > true
print(someSet.contains(4))
// > false

//================================================================
someSet.insert(5)
print(someSet)
//================================================================
let removedElement = someSet.remove(1)
print(removedElement!)
// > 1
print(someSet)

// Challenge 1 ================================================================
let array1 = [Int]() //INVALID //VALID
//let array2 = [] //INVALID
let array3: [String] = [] //VALID

//================================================================
let array4 = [1, 2, 3]

//================================================================
print("Challenge 1b")
print(array4[0]) //VALID
//print(array4[5]) //INVALID
array4[1...2] //VALID
//array4[0] = 4 //VALID //INVALID is a let constant
//array4.append(4) //VALID //INVALID is a let constant

//================================================================
var array5 = [1, 2, 3]

////================================================================
array5[0] = array5[1] //VALID
array5[0...1] = [4, 5] //VALID
//array5[0] = "Six" //INVALID
//array5 += 6 //INVALID
print("Challenge 1c")
for item in array5 { print(item) } //VALID

// Challenge 2 ================================================================
func removingFirstOccurance(_ item: Int, from array: [Int]) -> [Int] {
  var array1 = array
  if let index = array.firstIndex(of: item) {
    array1.remove(at: index)
  }
  return array1
}
removingFirstOccurance(5, from: array5)
print("Challenge 2")
print(array5)

//================================================================
var findInArray = [3, 6, 2, 8, 8, 9, 5, 2, 1, 8, 2, 8, 8, 9, 1]
func removing(_ item: Int, from array: [Int]) -> [Int] {
  var foundItems = array
  while (foundItems.firstIndex(of: item) != nil) {
    if let index = foundItems.firstIndex(of: item) {
      foundItems.remove(at: index)
    }
  }
  return foundItems
}
print("Challenge 3")
print(findInArray)
removing(6, from: findInArray)
print(findInArray)

// Challenge 4 ================================================================
func reversed(_ array: [Int]) -> [Int] {
  return array.reversed()
}
print("Challenge 4")
print(reversed(findInArray))
// Challenge 5 ================================================================
var odd = [3, 6, 2, 5, 2, 8, 8, 9, 1]
var even = [3, 6, 2, 8, 8, 9, 5, 2, 1, 8]
func middle(_ array: [Int]) -> Int? {
  var length : Int
  length = array.count
  print("length = \(length)")
  if length % 2 == 0 {
    return array[(length/2) - 1]
  } else {
    print("length/2 = \(length/2)")
    print("Int(length/2) = \(Int(length/2))")
    return array[Int(length/2)]
  }
}
print("Challenge 5")
if let middle = middle(odd) {
  print("[3, 6, 2, 5, 2, 8, 8, 9, 1] middle = \(middle)")
}
if let middle = middle(even) {
  print("[3, 6, 2, 8, 8, 9, 5, 2, 1, 8] middle = \(middle)")
}
// Challenge 6 ================================================================
let minMaxArray : [Int] = [3, 6, 2, 8, 8, 9, 5, 2, 1, 8, 2, 8, 8, 9, 1]
func minMax(of numbers: [Int]) -> (min: Int, max: Int)? {
  if numbers == [] {
    return nil
  }
  var length : Int
  length = numbers.count
  return (min: numbers[0], max: numbers[length - 1])
}
print("Challenge 6")
if let minMax = minMax(of: minMaxArray) {
  print(minMax)
} else {
  print("nil")
}
// Challenge 7a ================================================================
//let dict1: [Int, Int] = [:] //INVALID
//let dict2 = [:] //INVALID
let dict3: [Int: Int] = [:] //VALID

// Challenge 7b ================================================================
let dict4 = ["One": 1, "Two": 2, "Three": 3]
//dict4[1] //INVALID
dict4["One"] //VALID
//dict4["Zero"] = 0 //INVALID
//dict4[0] = "Zero" //INVALID

// Challenge 7c ================================================================
var dict5 = ["NY": "New York", "CA": "California"]
dict5["NY"] //VALID
dict5["WA"] = "Washington" //VALID
dict5["CA"] = nil //VALID
// Challenge 8 ================================================================
func longerThanEightPrint(dict: [String: String]) -> [String] {
  var printOut : [String] = []
  for city in dict.values {
    if city.count > 8 {
      printOut.append(city)
    }
  }
  return printOut
}
print("Challenge 8")
print(longerThanEightPrint(dict: dict5))




// Challenge 9 ================================================================
var dicA = ["NY": "New York", "CA": "California"]
var dicB = ["Mary": "Engineer", "Patrick": "Intern", "Ray": "Hacker"]

func merging(_ dict1: [String: String], with dict2: [String: String]) -> [String: String] {
  var dic1A = dict1
  var dic2A = dict2
  for c in dict2.keys {
    dic1A[c] = dic2A[c]
  }
    return dic1A
}
print("Challenge 9")
var newDic = merging(dicA, with: dicB)
dicA = [:]
dicB = [:]
dicA = newDic
print(dicA)
print(dicB)
// Challenge 10 ================================================================
func occurrencesOfCharacters(in text: String) -> [Character: Int?] {
  var charList : [Character: Int?] = ["a": nil, "n": nil]
  charList["a", default: 0]
  charList["b", default: 0]
  charList["c", default: 0]
  charList["d", default: 0]
  charList["e", default: 0]
  charList["f", default: 0]
  charList["g", default: 0]
  charList["h", default: 0]
  charList["i", default: 0]
  charList["j", default: 0]
  charList["k", default: 0]
  charList["l", default: 0]
  charList["m", default: 0]
  charList["n", default: 0]
  charList["o", default: 0]
  charList["p", default: 0]
  charList["q", default: 0]
  charList["r", default: 0]
  charList["s", default: 0]
  charList["t", default: 0]
  charList["u", default: 0]
  charList["v", default: 0]
  charList["w", default: 0]
  charList["x", default: 0]
  charList["y", default: 0]
  charList["z", default: 0]
  
  return charList
}
print("Challenge 10")
print(occurrencesOfCharacters(in: ""))
////================================================================
//func isInvertible(_ dictionary: [String: Int]) -> Bool
//
////================================================================
//var nameTitleLookup: [String: String?] = ["Mary": "Engineer", "Patrick": "Intern", "Ray": "Hacker"]
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
