import Foundation

//================================================================
let string = "Matt"
for char in string {
  print(char)
}


//================================================================
let stringLength = string.count


//================================================================
//let fourthChar = string[3]

//================================================================
let cafeNormal = "cafÃ©"
let cafeCombining = "cafe\u{0301}"

cafeNormal.count     // 4
cafeCombining.count  // 4


//================================================================
cafeNormal.unicodeScalars.count     // 4
cafeCombining.unicodeScalars.count  // 5

//================================================================
for codePoint in cafeCombining.unicodeScalars {
  print(codePoint.value)
}


//================================================================
//99
//97
//102
//101
//769

//================================================================
let firstIndex = cafeCombining.startIndex


//================================================================
let firstChar = cafeCombining[firstIndex]


//================================================================
//let lastIndex = cafeCombining.endIndex
//let lastChar = cafeCombining[lastIndex]
//Fatal error: String index is out of bounds
//
//================================================================
let lastIndex = cafeCombining.index(before: cafeCombining.endIndex)
let lastChar = cafeCombining[lastIndex]

//================================================================
let fourthIndex = cafeCombining.index(cafeCombining.startIndex, offsetBy: 3)
let fourthChar = cafeCombining[fourthIndex]


//================================================================
fourthChar.unicodeScalars.count // 2
fourthChar.unicodeScalars.forEach { codePoint in
  print(codePoint.value)
}

//================================================================
//101
//769
//
//================================================================
let equal = cafeNormal == cafeCombining

//================================================================
let name = "Matt"
let backwardsName = name.reversed()

//================================================================
let secondCharIndex = backwardsName.index(backwardsName.startIndex,
    offsetBy: 1)
let secondChar = backwardsName[secondCharIndex] // "t"

//================================================================
let backwardsNameString = String(backwardsName)

//================================================================
let raw1 = #"Raw "No Escaping" \(no interpolation!). Use all the \ you want!"#
print(raw1)
// Raw "No Escaping" \(no interpolation!). Use all the \ you want!

//================================================================
let raw2 = ##"Arenâ€™t we "# clever"##
print(raw2)
//Arenâ€™t we "# clever

//================================================================
let can = "can do that too"
let raw3 = #"Yes we \#(can)!"#
print(raw3)
//Yes, we can do that too!

//================================================================
let multiRaw = #"""
  _____         _  __ _
 / ____|       (_)/ _| |
| (_____      ___| |_| |_
 \___ \ \ /\ / / |  _| __|
 ____) \ V  V /| | | | |_
|_____/ \_/\_/ |_|_|  \__|
"""#
print(multiRaw)

//================================================================
let fullName = "Matt Galloway"
let spaceIndex = fullName.firstIndex(of: " ")!
let firstName = fullName[fullName.startIndex..<spaceIndex] // "Matt"

//================================================================
let firstNameB = fullName[..<spaceIndex] // "Matt"

//================================================================
let lastName = fullName[fullName.index(after: spaceIndex)...]
// "Galloway"

//================================================================
let lastNameString = String(lastName)

//================================================================
let singleCharacter: Character = "x"
singleCharacter.isASCII

//================================================================
let space: Character = " "
space.isWhitespace

//================================================================
let hexDigit: Character = "d"
hexDigit.isHexDigit

//================================================================
let thaiNine: Character = "à¹™"
thaiNine.wholeNumberValue

//================================================================
let char = "\u{00bd}"
for i in char.utf8 {
  print(i)
}
//194
//189

//================================================================
//+Â½â‡¨ðŸ™ƒ

//================================================================
let characters = "+\u{00bd}\u{21e8}\u{1f643}"
for i in characters.utf8 {
  print("\(i) : \(String(i, radix: 2))")
}
//43 : 101011
//
//194 : 11000010
//189 : 10111101
//
//226 : 11100010
//135 : 10000111
//168 : 10101000
//
//240 : 11110000
//159 : 10011111
//153 : 10011001
//131 : 10000011


//================================================================
for i in characters.utf16 {
  print("\(i) : \(String(i, radix: 2))")
}
//43 : 101011
//
//189 : 10111101
//
//8680 : 10000111101000
//
//55357 : 1101100000111101
//56899 : 1101111001000011

//================================================================
let arrowIndex = characters.firstIndex(of: "\u{21e8}")!
characters[arrowIndex] // â‡¨

//================================================================
if let unicodeScalarsIndex = arrowIndex.samePosition(in: characters.unicodeScalars) {
  characters.unicodeScalars[unicodeScalarsIndex] // 8680
}

if let utf8Index = arrowIndex.samePosition(in: characters.utf8) {
  characters.utf8[utf8Index] // 226
}

if let utf16Index = arrowIndex.samePosition(in: characters.utf16) {
  characters.utf16[utf16Index] // 8680
}

// Challenge 1: Character Count ================================================================
func charCount(text: String) -> Int {
  text.count
}

charCount(text: "Character")

// Challenge 2: Word Count ================================================================
func wordsCount(text: String) -> Int {
  var word = 0
  for codePoint in text.unicodeScalars {
    if codePoint == " " {
      word += 1
    }
  }
  return word + 1
}

print(wordsCount(text: "be accessed using constant offsets. Swift also wants to prevent you from inadvertently writing inefficient, battery-draining string-processing code. You might not see"))


// Challenge 3: Name Formatter ================================================================
print("Challenge 3: Name Formatter")
func nameFormatter(name: String) -> String {
  var lastName : [String] = []
  var firstName : [String] = []
  var nowLastName = false
  for c in 1...name.count {
    let position = name.index(name.startIndex, offsetBy: c - 1)
    if nowLastName == false {
      if name[position] != "," {
           lastName.append(String(name[position]))
         } else {
           nowLastName = true
         }
    } else {
      if name[position] != " " {
        firstName.append(String(name[position]))
      }
    }
  }
  let newFirst = firstName.reduce("") {
    $0 + $1
  }
  let newLast = lastName.reduce("") {
    $0 + $1
  }
  return "\(newFirst) \(newLast)"
}

print(nameFormatter(name: "Phill, Geoff"))

// Challenge 4: Components ================================================================
print("Challenge 4: Components")
func splitString(text: String, delimiter: String) -> [String] {
  print(text.count)
  var blobArray : [String] = []
  var blob = ""
  for c in 1...text.count {
    let position = text.index(text.startIndex, offsetBy: c - 1)
    print(String(text[position]))
    if name[position] != delimiter {
      blob += String(text[position])
    } else {
      blobArray.append(blob)
      blob = ""
    }
    print(blob)
  }
  return blobArray
}
print(splitString(text: "alphabetical order. This list is missing a player that starts with the letter F. Luckily, Frank has just arrived. You want to add him to the list between Eli and Gina. To do that, you can use the insert(_:at:) method: players.insert(\"Frank\", at: 5) The at argument defines where you want to add the element. Remember that the array is zero-indexed, so index 5 is Ginaâ€™s index, causing her to move up as Frank takes her place. Removing Elements During the game, the other players caught Cindy and Gina cheating. They should be removed from the game! You know that Gina is last in players, so you can remove her easily with the removeLast() method: var removedPlayer = players.removeLast() print(\"\\(removedPlayer) was removed\") // > Gina was removed This method does two things: It removes the last element and then returns it, in case you need to print it or store it somewhere else â€” like in an array of cheaters! To remove Cindy from the game, you need to know the exact index where her name is stored. Looking at the list of players, you see that sheâ€™s third, so her index is 2. removedPlayer = players.remove(at: 2) print(\"\\(removedPlayer) was removed\") // > Cindy was removed But how would you get the index of an element if you didnâ€™t already know it? Thereâ€™s a method for that! firstIndex(of:) returns the first index of the element because the array might contain multiple copies of the same value. If the method doesnâ€™t find the element, it returns nil. Mini-Exercise Use firstIndex(of:) to determine the position of the element \"Dan\" in players. Updating Elements Frank has decided everyone should call him Franklin from now on. You could remove the value \"Frank\" from the array and then add \"Franklin\", but thatâ€™s too much work for a simple task. Instead, you should use the subscript syntax to update the name. print(players) // > [\"Alice\", \"Bob\", \"Dan\", \"Eli\", \"Frank\"] players[4] = \"Franklin\" print(players) // > [\"Alice\", \"Bob\", \"Dan\", \"Eli\", \"Franklin\"] Be careful not to use an index beyond the arrayâ€™s bounds, or your program will halt. As the game continues, some players are eliminated, and new ones come to replace them. You can also use subscripting with ranges to update multiple values in a single line of code: players[0...1] = [\"Donna\", \"Craig\", \"Brian\", \"Anna\"] print(players) // > [\"Donna\", \"Craig\", \"Brian\", \"Anna\", \"Dan\", \"Eli\", \"Franklin\"] This code replaces the first two players, Alice and Bob, with the four players in the new playerâ€™s array. As you can see, the size of the range doesnâ€™t have to be equal to the size of the array that holds the values youâ€™re adding. Moving Elements Take a look at this mess! The players array con", delimiter: " "))



////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
////================================================================
//
//
